const { PrismaClient } = require('./src/generated/prisma');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function updateAdminPassword() {
  try {
    console.log('üîß –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...\n');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    const user = await prisma.user.findUnique({
      where: { email: 'admin@example.com' },
      include: { role: true }
    });

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å admin@example.com –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
    console.log(`üë§ –†–æ–ª—å: ${user.role?.name}\n`);

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Ö–µ—à –¥–ª—è –ø–∞—Ä–æ–ª—è admin123
    const newPassword = 'admin123';
    const newHash = await bcrypt.hash(newPassword, 10);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –≤ –±–∞–∑–µ
    const updatedUser = await prisma.user.update({
      where: { email: 'admin@example.com' },
      data: { password: newHash }
    });

    console.log('‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!');
    console.log(`üìß Email: ${updatedUser.email}`);
    console.log(`üîë –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ${newPassword}`);
    console.log(`üîê –ù–æ–≤—ã–π —Ö–µ—à: ${newHash.substring(0, 20)}...\n`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    const isPasswordValid = await bcrypt.compare(newPassword, newHash);
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è: ${isPasswordValid}`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', error);
  } finally {
    await prisma.$disconnect();
  }
}

updateAdminPassword(); 