const { PrismaClient } = require('../src/generated/prisma');
const prisma = new PrismaClient();

async function addTasksToUsers() {
  try {
    console.log('üîß Adding tasks to existing users...');

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await prisma.user.findMany();
    console.log(`Found ${users.length} users`);

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏
    const globalTasks = await prisma.task.findMany({ where: { isGlobal: true } });
    console.log(`Found ${globalTasks.length} global tasks`);

    let addedCount = 0;
    let skippedCount = 0;

    for (const user of users) {
      for (const task of globalTasks) {
        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ UserTask –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
        const existingUserTask = await prisma.userTask.findFirst({
          where: {
            userId: user.id,
            taskId: task.id
          }
        });

        if (!existingUserTask) {
          // –°–æ–∑–¥–∞—Ç—å UserTask
          await prisma.userTask.create({
            data: {
              userId: user.id,
              taskId: task.id,
              status: 'pending',
              assignedAt: new Date()
            }
          });
          addedCount++;
        } else {
          skippedCount++;
        }
      }
    }

    console.log(`‚úÖ Added ${addedCount} new UserTask records`);
    console.log(`‚è≠Ô∏è Skipped ${skippedCount} existing UserTask records`);
    console.log('üéâ Task assignment completed!');

  } catch (error) {
    console.error('‚ùå Error adding tasks to users:', error);
  } finally {
    await prisma.$disconnect();
  }
}

addTasksToUsers(); 