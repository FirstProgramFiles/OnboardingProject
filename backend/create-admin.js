const { PrismaClient } = require('./src/generated/prisma');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createAdmin() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ä–æ–ª—å admin
    let adminRole = await prisma.role.findUnique({
      where: { name: 'admin' }
    });

    // –ï—Å–ª–∏ —Ä–æ–ª–∏ admin –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ—ë
    if (!adminRole) {
      adminRole = await prisma.role.create({
        data: {
          name: 'admin',
          description: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∏—Å—Ç–µ–º—ã'
        }
      });
      console.log('‚úÖ –†–æ–ª—å admin —Å–æ–∑–¥–∞–Ω–∞');
    } else {
      console.log('‚úÖ –†–æ–ª—å admin —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ä–æ–ª—å—é admin
    const existingAdmin = await prisma.user.findFirst({
      where: {
        role: {
          name: 'admin'
        }
      }
    });

    if (existingAdmin) {
      console.log('‚ö†Ô∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', existingAdmin.email);
      return;
    }

    // –°–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const hashedPassword = await bcrypt.hash('admin123', 10);
    
    const admin = await prisma.user.create({
      data: {
        email: 'admin@example.com',
        password: hashedPassword,
        roleId: adminRole.id
      },
      include: {
        role: true
      }
    });

    console.log('‚úÖ –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìß Email:', admin.email);
    console.log('üîë –ü–∞—Ä–æ–ª—å: admin123');
    console.log('üë§ –†–æ–ª—å:', admin.role.name);
    console.log('\n‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
  } finally {
    await prisma.$disconnect();
  }
}

createAdmin(); 