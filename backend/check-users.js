const { PrismaClient } = require('./src/generated/prisma');

const prisma = new PrismaClient();

async function checkUsers() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
    
    const users = await prisma.user.findMany({
      include: {
        role: true
      }
    });

    if (users.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –Ω–µ—Ç!');
      return;
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}\n`);
    
    users.forEach((user, index) => {
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #${index + 1}:`);
      console.log(`   ID: ${user.id}`);
      console.log(`   Email: ${user.email}`);
      console.log(`   –†–æ–ª—å: ${user.role?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      console.log(`   –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${user.createdAt}`);
      console.log(`   –ü–∞—Ä–æ–ª—å (—Ö–µ—à): ${user.password.substring(0, 20)}...`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkUsers(); 